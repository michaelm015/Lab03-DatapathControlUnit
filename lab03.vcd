$date
	Sun Feb  9 07:08:07 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module datapath_tb $end
$var wire 1 ! zero $end
$var wire 32 " result [31:0] $end
$var wire 1 # reg_write $end
$var wire 1 $ reg_dst $end
$var wire 1 % mem_write $end
$var wire 1 & mem_to_reg $end
$var wire 1 ' mem_read $end
$var wire 1 ( branch $end
$var wire 1 ) alu_src $end
$var wire 2 * alu_op [1:0] $end
$var wire 4 + alu_ctrl [3:0] $end
$var reg 32 , A [31:0] $end
$var reg 32 - B [31:0] $end
$var reg 1 . clk $end
$var reg 32 / instruction [31:0] $end
$var integer 32 0 failedTests [31:0] $end
$var integer 32 1 totalTests [31:0] $end
$scope module alu_control_uut $end
$var wire 6 2 funct [5:0] $end
$var wire 2 3 alu_op [1:0] $end
$var reg 4 4 alu_control [3:0] $end
$upscope $end
$scope module alu_uut $end
$var wire 32 5 A [31:0] $end
$var wire 32 6 B [31:0] $end
$var wire 4 7 alu_control [3:0] $end
$var reg 32 8 result [31:0] $end
$var reg 1 ! zero $end
$upscope $end
$scope module control_uut $end
$var wire 6 9 instr_op [5:0] $end
$var reg 2 : alu_op [1:0] $end
$var reg 1 ) alu_src $end
$var reg 1 ( branch $end
$var reg 1 ' mem_read $end
$var reg 1 & mem_to_reg $end
$var reg 1 % mem_write $end
$var reg 1 $ reg_dst $end
$var reg 1 # reg_write $end
$upscope $end
$scope task test_case $end
$var reg 32 ; A_val [31:0] $end
$var reg 32 < B_val [31:0] $end
$var reg 2 = alu_op_val [1:0] $end
$var reg 1 > alu_src_val $end
$var reg 1 ? branch_val $end
$var reg 32 @ instruction_val [31:0] $end
$var reg 1 A mem_read_val $end
$var reg 1 B mem_to_reg_val $end
$var reg 1 C mem_write_val $end
$var reg 1 D reg_dst_val $end
$var reg 1 E reg_write_val $end
$var reg 32 F result_val [31:0] $end
$var reg 1 G zero_val $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
xG
bx F
xE
xD
xC
xB
xA
bx @
x?
x>
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
b0 1
b0 0
bx /
0.
bx -
bx ,
bx +
bx *
x)
x(
x'
x&
x%
x$
x#
bx "
x!
$end
#50000
1.
#60000
b10 *
b10 3
b10 :
0(
0%
0'
1#
0&
0)
1$
b0 +
b0 4
b0 7
0!
b1 "
b1 8
b0 9
b100100 2
b1 -
b1 6
b11111111111111111111111111111111 ,
b11111111111111111111111111111111 5
b100100 /
b1 1
1E
0>
0C
b10 =
0B
0A
0?
1D
b1 F
0G
b1 <
b11111111111111111111111111111111 ;
b100100 @
#100000
0.
#150000
1.
#170000
b11111111111111111111111111111111 "
b11111111111111111111111111111111 8
b1 +
b1 4
b1 7
b100101 2
b100101 /
b10 1
b11111111111111111111111111111111 F
b100101 @
#200000
0.
#250000
1.
#280000
1!
b0 "
b0 8
b10 +
b10 4
b10 7
b100000 2
b100000 /
b11 1
b0 F
1G
b100000 @
#300000
0.
#350000
1.
#390000
0!
b11111111111111111111111111111110 "
b11111111111111111111111111111110 8
b110 +
b110 4
b110 7
b100010 2
b100010 /
b100 1
b11111111111111111111111111111110 F
0G
b100010 @
#400000
0.
#450000
1.
#500000
b1 "
b1 8
b111 +
b111 4
b111 7
b101010 2
b101010 /
b101 1
b1 F
b101010 @
0.
#550000
1.
#600000
0.
#610000
b11111111111111111111111111111111 "
b11111111111111111111111111111111 8
b0 *
b0 3
b0 :
1)
0$
b10 +
b10 4
b10 7
b1000 9
b100 2
b100 -
b100 6
b11111111111111111111111111111011 ,
b11111111111111111111111111111011 5
b100000000000000000000000000100 /
b110 1
1>
b0 =
0D
b11111111111111111111111111111111 F
b100 <
b11111111111111111111111111111011 ;
b100000000000000000000000000100 @
#650000
1.
#700000
0.
#720000
1'
1&
b100011111 "
b100011111 8
b100011 9
b100000 2
b100000 -
b100000 6
b11111111 ,
b11111111 5
b10001100000000000000000000100000 /
b111 1
1B
1A
b100011111 F
b100000 <
b11111111 ;
b10001100000000000000000000100000 @
#750000
1.
#800000
0.
#830000
1%
0'
0#
x&
x$
b101100011 "
b101100011 8
b101011 9
b100100 2
b1100100 -
b1100100 6
b10101100000000000000000001100100 /
b1000 1
0E
1C
xB
0A
xD
b101100011 F
b1100100 <
b10101100000000000000000001100100 @
#850000
1.
#900000
0.
#940000
